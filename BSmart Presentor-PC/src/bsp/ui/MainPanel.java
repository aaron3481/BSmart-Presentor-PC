/*
 * MainPanel.java
 *
 * Created on __DATE__, __TIME__
 */

package bsp.ui;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;
import java.io.FileNotFoundException;

import javax.swing.JFileChooser;
import javax.swing.JProgressBar;
import javax.swing.filechooser.FileNameExtensionFilter;
import bsp.fileloader.Loader;

/**
 * 
 * @author Jiannan Cai
 */
public class MainPanel extends javax.swing.JPanel {

	/** Creates new form MainPanel */
	public MainPanel() {
		initComponents();
		initMyComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// GEN-BEGIN:initComponents
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {

		fileChooser = new javax.swing.JFileChooser();
		loadFile = new javax.swing.JProgressBar();
		ll_Path = new javax.swing.JLabel();
		TF_Path = new javax.swing.JTextField();
		b_Open = new javax.swing.JButton();
		jSeparator1 = new javax.swing.JSeparator();
		b_Load = new javax.swing.JButton();
		b_TimeFrame = new javax.swing.JButton();
		b_Send = new javax.swing.JButton();
		jSeparator2 = new javax.swing.JSeparator();
		jProgressBar1 = new javax.swing.JProgressBar();

		setPreferredSize(new java.awt.Dimension(315, 430));
		setRequestFocusEnabled(false);
		addPropertyChangeListener(new java.beans.PropertyChangeListener() {
			public void propertyChange(java.beans.PropertyChangeEvent evt) {
				formPropertyChange(evt);
			}
		});

		ll_Path.setFont(new java.awt.Font("Segoe UI", 0, 14));
		ll_Path.setText("File: ");

		TF_Path.setEditable(false);
		TF_Path.setText("Aaron Cai");

		b_Open.setText("Open..");
		b_Open.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				b_OpenActionPerformed(evt);
			}
		});

		b_Load.setText("Load");
		b_Load.setPreferredSize(new java.awt.Dimension(95, 25));
		b_Load.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				b_LoadActionPerformed(evt);
			}
		});

		b_TimeFrame.setText("Time Frame");
		b_TimeFrame.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				b_TimeFrameActionPerformed(evt);
			}
		});

		b_Send.setText("Send");
		b_Send.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				b_SendActionPerformed(evt);
			}
		});

		jProgressBar1.setStringPainted(true);

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
		this.setLayout(layout);
		layout.setHorizontalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						layout.createSequentialGroup()
								.addContainerGap()
								.addComponent(ll_Path)
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(TF_Path,
										javax.swing.GroupLayout.DEFAULT_SIZE,
										185, Short.MAX_VALUE)
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(b_Open).addContainerGap())
				.addComponent(jSeparator1,
						javax.swing.GroupLayout.DEFAULT_SIZE, 315,
						Short.MAX_VALUE)
				.addGroup(
						layout.createSequentialGroup()
								.addContainerGap()
								.addComponent(b_Load,
										javax.swing.GroupLayout.PREFERRED_SIZE,
										103,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(b_Send,
										javax.swing.GroupLayout.PREFERRED_SIZE,
										77,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(b_TimeFrame)
								.addContainerGap(14, Short.MAX_VALUE))
				.addComponent(jSeparator2,
						javax.swing.GroupLayout.DEFAULT_SIZE, 315,
						Short.MAX_VALUE)
				.addGroup(
						layout.createSequentialGroup()
								.addGap(81, 81, 81)
								.addComponent(jProgressBar1,
										javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addContainerGap(88, Short.MAX_VALUE)));
		layout.setVerticalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						layout.createSequentialGroup()
								.addContainerGap()
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(ll_Path)
												.addComponent(b_Open)
												.addComponent(
														TF_Path,
														javax.swing.GroupLayout.PREFERRED_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.PREFERRED_SIZE))
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(jSeparator1,
										javax.swing.GroupLayout.PREFERRED_SIZE,
										10,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED,
										205, Short.MAX_VALUE)
								.addComponent(jProgressBar1,
										javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addGap(96, 96, 96)
								.addComponent(jSeparator2,
										javax.swing.GroupLayout.PREFERRED_SIZE,
										10,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(
														b_Load,
														javax.swing.GroupLayout.PREFERRED_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.PREFERRED_SIZE)
												.addComponent(b_TimeFrame)
												.addComponent(b_Send))
								.addContainerGap()));
	}// </editor-fold>
		// GEN-END:initComponents

	private void formPropertyChange(java.beans.PropertyChangeEvent evt) {
		// TODO add your handling code here:
		System.out.println("PropertyChange: " + evt.getPropertyName()
				+ " Value: " + evt.getNewValue());
	}

	private void b_TimeFrameActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
		/*
		 * for(int i =0; i<190000;i++){ loadFile.setValue(i); try {
		 * Thread.sleep(100); } catch (InterruptedException e) { // TODO
		 * Auto-generated catch block e.printStackTrace(); } }
		 */
		PBTask task = new PBTask();

		task.addPropertyChangeListener(new PropertyChangeListener() {

			@Override
			public void propertyChange(PropertyChangeEvent evt) {
				// TODO Auto-generated method stub
				// System.out.println("Change");
				// System.out.println(evt.getPropagationId());
				if ("progress".equals(evt.getPropertyName())) {
					loadFile.setValue((Integer) evt.getNewValue());
				}
			}
		});

		PBTask2 task2 = new PBTask2();
		task2.addPropertyChangeListener(new PropertyChangeListener() {

			@Override
			public void propertyChange(PropertyChangeEvent evt) {
				// TODO Auto-generated method stub
				// System.out.println("Change");
				// System.out.println(evt.getPropagationId());
				if ("progress".equals(evt.getPropertyName())) {
					jProgressBar1.setValue((Integer) evt.getNewValue());
				}
			}
		});

		task.execute();
		task2.execute();
		// System.out.println(task.isDone());
	}

	private void b_LoadActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
		String path = TF_Path.getText();
		String extension = path.substring(path.lastIndexOf('.'));
		if (extension.equals(".pptx")) {
			loader = new bsp.fileloader.LoadPPTX(this, path);
			System.out.println(path);
		}

		return;
	}

	private void b_SendActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
		javax.swing.JFrame parent = (javax.swing.JFrame) this.getRootPane()
				.getParent();
		parent.remove(this);
		parent.repaint();
	}

	private void b_OpenActionPerformed(java.awt.event.ActionEvent evt) {
		int reval = fileChooser.showOpenDialog(this);
		if (reval == JFileChooser.APPROVE_OPTION) {
			TF_Path.setText(fileChooser.getSelectedFile().getPath());
			TF_Path.setToolTipText(TF_Path.getText());
			// System.out.println(TF_Path.getText());
		}
		b_Load.setEnabled(true);
	}

	private void initMyComponents() {
		initFChooser();

		b_Load.setEnabled(false);
		// b_Send.setEnabled(false);
		// b_TimeFrame.setEnabled(false);

		loadFile.setBounds(84, 210, 146, 14);
		loadFile.setStringPainted(true);
		loadFile.setMaximum(100);

		// loadFile.setValue(5);

		this.add(loadFile);
		this.repaint();

		// System.out.println(p_Body.getPreferredSize());
		javax.swing.JButton test = new javax.swing.JButton("Test");
		test.setBounds(0, 45, 315, 330);
		// this.add(test);
		// this.repaint();
	}

	// Initialise the file chooser. Only the .ppt or .pdf files
	// can be shown
	private void initFChooser() {
		FileNameExtensionFilter filter = new FileNameExtensionFilter(
				"ppt,pptx or pdf", "ppt", "pptx", "pdf");
		fileChooser.setAcceptAllFileFilterUsed(false);
		fileChooser.setFileFilter(filter);

	}

	// GEN-BEGIN:variables
	// Variables declaration - do not modify
	private javax.swing.JTextField TF_Path;
	private javax.swing.JButton b_Load;
	private javax.swing.JButton b_Open;
	private javax.swing.JButton b_Send;
	private javax.swing.JButton b_TimeFrame;
	private javax.swing.JFileChooser fileChooser;
	private javax.swing.JProgressBar jProgressBar1;
	private javax.swing.JSeparator jSeparator1;
	private javax.swing.JSeparator jSeparator2;
	private javax.swing.JLabel ll_Path;
	private javax.swing.JProgressBar loadFile;
	// End of variables declaration//GEN-END:variables

	private Loader loader;

	class PBTask extends
			javax.swing.SwingWorker<javax.swing.JProgressBar, Integer> {

		@Override
		protected JProgressBar doInBackground() throws Exception {

			// TODO Auto-generated method stub
			for (int i = 0; i < 101; i++) {
				setProgress(i);
				try {
					Thread.sleep(100);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			return null;
		}

	}

	class PBTask2 extends
			javax.swing.SwingWorker<javax.swing.JProgressBar, Integer> {

		@Override
		protected JProgressBar doInBackground() throws Exception {

			// TODO Auto-generated method stub
			for (int i = 0; i < 101; i++) {
				setProgress(i);
				try {
					Thread.sleep(50);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			return null;
		}

	}

	class pcs extends PropertyChangeSupport {

		public pcs(Object sourceBean) {
			super(sourceBean);
			// TODO Auto-generated constructor stub
		}

	}

}